#!/usr/bin/env node

/**
 * module variables
 * @private
 */
var app;
var config;
var debug;
var fs;
var https;
var ip_address;
var port;
var server;
var ssloptions;

/**
 * module dependencies
 */
app = require( '../app' );
config = require( '../app/config' );
debug = require( 'debug' )( 'app:server' );
fs = require( 'fs' );
https = require( 'https' );

/**
 * get port from environment and store in express
 */
port = normalizePort( config.port );
app.set( 'port', port );

/**
 * get server ip from environment
 */
ip_address = config.ip_address.toString();

/**
 * ssl options
 */
ssloptions = {
  cert: fs.readFileSync( config.ssl.crt ),
  key: fs.readFileSync( config.ssl.key )
};

/**
 * create HTTP server
 */
server = https.createServer( ssloptions, app );

/**
 * listen on provided port, on all network interfaces
 */
server.listen( port, ip_address );
server.on( 'error', onError );
server.on( 'listening', onListening );

/**
 * normalize a port into a number, string, or false
 */
function normalizePort( val ) {
  var port = parseInt( val, 10 );

  if ( isNaN( port ) ) {
    // named pipe
    return val;
  }

  if ( port >= 0 ) {
    // port number
    return port;
  }

  return false;
}

/**
 * event listener for HTTP server "error" event
 */
function onError( error ) {
  var bind;

  if ( error.syscall !== 'listen' ) {
    throw error;
  }

  bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch ( error.code ) {
    case 'EACCES':
      console.error( bind + ' requires elevated privileges' );
      process.exit( 1 );
      break;
    case 'EADDRINUSE':
      console.error( bind + ' is already in use' );
      process.exit( 1 );
      break;
    default:
      throw error;
  }
}

/**
 * event listener for HTTP server "listening" event
 */
function onListening() {
  console.log( 'server listening on https:', server.address() );
}